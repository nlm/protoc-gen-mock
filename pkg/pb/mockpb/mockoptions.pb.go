// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: mockoptions.proto

package mockpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StandardFieldType represents a standard type.
// These types are useful to provide context to protobuf generators
// and therefore, improve the generation.
type MockFieldType int32

const (
	MockFieldType_mock_field_type_unknown MockFieldType = 0 // technical
	MockFieldType_ip                      MockFieldType = 1
	MockFieldType_ipv4                    MockFieldType = 2
	MockFieldType_ipv6                    MockFieldType = 3
	MockFieldType_size                    MockFieldType = 4
	MockFieldType_uuid                    MockFieldType = 5
	MockFieldType_ipnet                   MockFieldType = 6
	MockFieldType_mac_address             MockFieldType = 7
	MockFieldType_url                     MockFieldType = 8
	MockFieldType_useragent               MockFieldType = 20
	MockFieldType_domain                  MockFieldType = 21
	MockFieldType_tld                     MockFieldType = 22
	MockFieldType_email                   MockFieldType = 23
	MockFieldType_file_extension          MockFieldType = 24
	MockFieldType_mime_type               MockFieldType = 25
	MockFieldType_http_method             MockFieldType = 26
	MockFieldType_http_statuscode         MockFieldType = 27
	MockFieldType_http_statuscode_simple  MockFieldType = 28
	MockFieldType_hexcolor                MockFieldType = 29
	// images
	MockFieldType_image     MockFieldType = 40
	MockFieldType_image_url MockFieldType = 41
	MockFieldType_log_level MockFieldType = 42
	// street_address will generate a random address street string
	MockFieldType_street_address MockFieldType = 50
	// StreetName will generate a random address street name string
	MockFieldType_street_name MockFieldType = 51
	// StreetNumber will generate a random address street number string
	MockFieldType_street_number MockFieldType = 52
	// StreetPrefix will generate a random address street prefix string
	MockFieldType_street_prefix MockFieldType = 53
	// StreetSuffix will generate a random address street suffix string
	MockFieldType_street_suffix     MockFieldType = 54
	MockFieldType_city              MockFieldType = 55
	MockFieldType_country           MockFieldType = 56
	MockFieldType_country_short     MockFieldType = 57
	MockFieldType_creditcard_cvv    MockFieldType = 58
	MockFieldType_creditcard_number MockFieldType = 59
	MockFieldType_creditcard_type   MockFieldType = 60
	MockFieldType_currency          MockFieldType = 61
	MockFieldType_currency_short    MockFieldType = 62
	MockFieldType_phone_number      MockFieldType = 63
	MockFieldType_language          MockFieldType = 64
	MockFieldType_language_short    MockFieldType = 65
	MockFieldType_language_bcp      MockFieldType = 66
	MockFieldType_latitude          MockFieldType = 67
	MockFieldType_longitude         MockFieldType = 68
	MockFieldType_timezone          MockFieldType = 69
	MockFieldType_timezone_short    MockFieldType = 70
	MockFieldType_timezone_offset   MockFieldType = 71
	// TimeZoneRegion will select a random region style timezone string, e.g. "America/Chicago"
	MockFieldType_timezone_region MockFieldType = 72
	MockFieldType_first_name      MockFieldType = 73
	MockFieldType_last_name       MockFieldType = 74
	MockFieldType_full_name       MockFieldType = 75
	MockFieldType_name_prefix     MockFieldType = 76
	MockFieldType_ssn             MockFieldType = 77
	MockFieldType_us_state        MockFieldType = 78
	MockFieldType_date            MockFieldType = 80
	MockFieldType_year            MockFieldType = 81
	MockFieldType_day             MockFieldType = 82
	MockFieldType_hour            MockFieldType = 83
	MockFieldType_minute          MockFieldType = 84
	MockFieldType_second          MockFieldType = 85
	MockFieldType_month           MockFieldType = 86
	MockFieldType_month_string    MockFieldType = 87
	MockFieldType_nanosecond      MockFieldType = 88
	// native types
	MockFieldType_number     MockFieldType = 100
	MockFieldType_float32    MockFieldType = 101
	MockFieldType_float64    MockFieldType = 102
	MockFieldType_hexuint8   MockFieldType = 103
	MockFieldType_hexuint16  MockFieldType = 104
	MockFieldType_hexuint32  MockFieldType = 105
	MockFieldType_hexuint64  MockFieldType = 106
	MockFieldType_hexuint128 MockFieldType = 107
	MockFieldType_hexuint256 MockFieldType = 108
	MockFieldType_int8       MockFieldType = 109
	MockFieldType_int16      MockFieldType = 110
	MockFieldType_int32      MockFieldType = 111
	MockFieldType_int64      MockFieldType = 112
	MockFieldType_uint8      MockFieldType = 113
	MockFieldType_uint16     MockFieldType = 114
	MockFieldType_uint32     MockFieldType = 115
	MockFieldType_uint64     MockFieldType = 116
	// misc
	MockFieldType_author      MockFieldType = 120
	MockFieldType_app_name    MockFieldType = 121
	MockFieldType_version     MockFieldType = 122
	MockFieldType_color       MockFieldType = 123
	MockFieldType_company     MockFieldType = 124
	MockFieldType_emoji       MockFieldType = 125
	MockFieldType_emoji_alias MockFieldType = 126
	MockFieldType_lorem_ipsum MockFieldType = 127
	MockFieldType_password    MockFieldType = 128
	MockFieldType_phrase      MockFieldType = 129
	MockFieldType_price       MockFieldType = 130
	MockFieldType_job_title   MockFieldType = 131
)

// Enum value maps for MockFieldType.
var (
	MockFieldType_name = map[int32]string{
		0:   "mock_field_type_unknown",
		1:   "ip",
		2:   "ipv4",
		3:   "ipv6",
		4:   "size",
		5:   "uuid",
		6:   "ipnet",
		7:   "mac_address",
		8:   "url",
		20:  "useragent",
		21:  "domain",
		22:  "tld",
		23:  "email",
		24:  "file_extension",
		25:  "mime_type",
		26:  "http_method",
		27:  "http_statuscode",
		28:  "http_statuscode_simple",
		29:  "hexcolor",
		40:  "image",
		41:  "image_url",
		42:  "log_level",
		50:  "street_address",
		51:  "street_name",
		52:  "street_number",
		53:  "street_prefix",
		54:  "street_suffix",
		55:  "city",
		56:  "country",
		57:  "country_short",
		58:  "creditcard_cvv",
		59:  "creditcard_number",
		60:  "creditcard_type",
		61:  "currency",
		62:  "currency_short",
		63:  "phone_number",
		64:  "language",
		65:  "language_short",
		66:  "language_bcp",
		67:  "latitude",
		68:  "longitude",
		69:  "timezone",
		70:  "timezone_short",
		71:  "timezone_offset",
		72:  "timezone_region",
		73:  "first_name",
		74:  "last_name",
		75:  "full_name",
		76:  "name_prefix",
		77:  "ssn",
		78:  "us_state",
		80:  "date",
		81:  "year",
		82:  "day",
		83:  "hour",
		84:  "minute",
		85:  "second",
		86:  "month",
		87:  "month_string",
		88:  "nanosecond",
		100: "number",
		101: "float32",
		102: "float64",
		103: "hexuint8",
		104: "hexuint16",
		105: "hexuint32",
		106: "hexuint64",
		107: "hexuint128",
		108: "hexuint256",
		109: "int8",
		110: "int16",
		111: "int32",
		112: "int64",
		113: "uint8",
		114: "uint16",
		115: "uint32",
		116: "uint64",
		120: "author",
		121: "app_name",
		122: "version",
		123: "color",
		124: "company",
		125: "emoji",
		126: "emoji_alias",
		127: "lorem_ipsum",
		128: "password",
		129: "phrase",
		130: "price",
		131: "job_title",
	}
	MockFieldType_value = map[string]int32{
		"mock_field_type_unknown": 0,
		"ip":                      1,
		"ipv4":                    2,
		"ipv6":                    3,
		"size":                    4,
		"uuid":                    5,
		"ipnet":                   6,
		"mac_address":             7,
		"url":                     8,
		"useragent":               20,
		"domain":                  21,
		"tld":                     22,
		"email":                   23,
		"file_extension":          24,
		"mime_type":               25,
		"http_method":             26,
		"http_statuscode":         27,
		"http_statuscode_simple":  28,
		"hexcolor":                29,
		"image":                   40,
		"image_url":               41,
		"log_level":               42,
		"street_address":          50,
		"street_name":             51,
		"street_number":           52,
		"street_prefix":           53,
		"street_suffix":           54,
		"city":                    55,
		"country":                 56,
		"country_short":           57,
		"creditcard_cvv":          58,
		"creditcard_number":       59,
		"creditcard_type":         60,
		"currency":                61,
		"currency_short":          62,
		"phone_number":            63,
		"language":                64,
		"language_short":          65,
		"language_bcp":            66,
		"latitude":                67,
		"longitude":               68,
		"timezone":                69,
		"timezone_short":          70,
		"timezone_offset":         71,
		"timezone_region":         72,
		"first_name":              73,
		"last_name":               74,
		"full_name":               75,
		"name_prefix":             76,
		"ssn":                     77,
		"us_state":                78,
		"date":                    80,
		"year":                    81,
		"day":                     82,
		"hour":                    83,
		"minute":                  84,
		"second":                  85,
		"month":                   86,
		"month_string":            87,
		"nanosecond":              88,
		"number":                  100,
		"float32":                 101,
		"float64":                 102,
		"hexuint8":                103,
		"hexuint16":               104,
		"hexuint32":               105,
		"hexuint64":               106,
		"hexuint128":              107,
		"hexuint256":              108,
		"int8":                    109,
		"int16":                   110,
		"int32":                   111,
		"int64":                   112,
		"uint8":                   113,
		"uint16":                  114,
		"uint32":                  115,
		"uint64":                  116,
		"author":                  120,
		"app_name":                121,
		"version":                 122,
		"color":                   123,
		"company":                 124,
		"emoji":                   125,
		"emoji_alias":             126,
		"lorem_ipsum":             127,
		"password":                128,
		"phrase":                  129,
		"price":                   130,
		"job_title":               131,
	}
)

func (x MockFieldType) Enum() *MockFieldType {
	p := new(MockFieldType)
	*p = x
	return p
}

func (x MockFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MockFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_mockoptions_proto_enumTypes[0].Descriptor()
}

func (MockFieldType) Type() protoreflect.EnumType {
	return &file_mockoptions_proto_enumTypes[0]
}

func (x MockFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MockFieldType.Descriptor instead.
func (MockFieldType) EnumDescriptor() ([]byte, []int) {
	return file_mockoptions_proto_rawDescGZIP(), []int{0}
}

var file_mockoptions_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*MockFieldType)(nil),
		Field:         90210,
		Name:          "mockpb.type",
		Tag:           "varint,90210,opt,name=type,enum=mockpb.MockFieldType",
		Filename:      "mockoptions.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// Type specify the standard type of a field.
	// On a map field, this annotation will target only the value type.
	//
	// optional mockpb.MockFieldType type = 90210;
	E_Type = &file_mockoptions_proto_extTypes[0]
)

var File_mockoptions_proto protoreflect.FileDescriptor

var file_mockoptions_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x6f, 0x63, 0x6b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xa6, 0x0a,
	0x0a, 0x0d, 0x4d, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x69, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05,
	0x69, 0x70, 0x6e, 0x65, 0x74, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x10,
	0x08, 0x12, 0x0d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x14,
	0x12, 0x0a, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03,
	0x74, 0x6c, 0x64, 0x10, 0x16, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x17,
	0x12, 0x12, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0x18, 0x12, 0x0d, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x10, 0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x68, 0x65, 0x78, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x10, 0x1d, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x28, 0x12, 0x0d,
	0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x10, 0x29, 0x12, 0x0d, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x32,
	0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10,
	0x33, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x10, 0x34, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x10, 0x35, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x10, 0x36, 0x12, 0x08, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x10, 0x37, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x10,
	0x38, 0x12, 0x11, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x10, 0x39, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x76, 0x76, 0x10, 0x3a, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x3b, 0x12,
	0x13, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x10, 0x3c, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x10, 0x3d, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x10, 0x3e, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x3f, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x10, 0x40, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x10, 0x41, 0x12, 0x10, 0x0a, 0x0c, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x63, 0x70, 0x10, 0x42, 0x12, 0x0c, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x10, 0x43, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x10, 0x44, 0x12, 0x0c, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x10, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x10, 0x46, 0x12, 0x13, 0x0a, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x10, 0x47,
	0x12, 0x13, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x10, 0x48, 0x12, 0x0e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x10, 0x49, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x10, 0x4a, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x10, 0x4b, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x10, 0x4c, 0x12, 0x07, 0x0a, 0x03, 0x73, 0x73, 0x6e, 0x10, 0x4d, 0x12, 0x0c, 0x0a,
	0x08, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x4e, 0x12, 0x08, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x10, 0x50, 0x12, 0x08, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x10, 0x51, 0x12,
	0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x52, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72,
	0x10, 0x53, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x10, 0x54, 0x12, 0x0a,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x55, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x10, 0x56, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x57, 0x12, 0x0e, 0x0a, 0x0a, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x58, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x10, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x10, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x10, 0x66, 0x12, 0x0c, 0x0a,
	0x08, 0x68, 0x65, 0x78, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x10, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x68,
	0x65, 0x78, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x10, 0x68, 0x12, 0x0d, 0x0a, 0x09, 0x68, 0x65,
	0x78, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x69, 0x12, 0x0d, 0x0a, 0x09, 0x68, 0x65, 0x78,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x10, 0x6a, 0x12, 0x0e, 0x0a, 0x0a, 0x68, 0x65, 0x78, 0x75,
	0x69, 0x6e, 0x74, 0x31, 0x32, 0x38, 0x10, 0x6b, 0x12, 0x0e, 0x0a, 0x0a, 0x68, 0x65, 0x78, 0x75,
	0x69, 0x6e, 0x74, 0x32, 0x35, 0x36, 0x10, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x38,
	0x10, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x10, 0x6e, 0x12, 0x09, 0x0a,
	0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x10, 0x6f, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x10, 0x70, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x10, 0x71, 0x12, 0x0a,
	0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x10, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x10, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x10, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x10, 0x78, 0x12, 0x0c,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x79, 0x12, 0x0b, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x7a, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x10, 0x7b, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x10,
	0x7c, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x10, 0x7d, 0x12, 0x0f, 0x0a, 0x0b,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x10, 0x7e, 0x12, 0x0f, 0x0a,
	0x0b, 0x6c, 0x6f, 0x72, 0x65, 0x6d, 0x5f, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x10, 0x7f, 0x12, 0x0d,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x80, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x10, 0x81, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x10, 0x82, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x10, 0x83, 0x01, 0x3a, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe2, 0xc0,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x2e, 0x4d,
	0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6e, 0x6c, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6d, 0x6f, 0x63, 0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x6f, 0x63, 0x6b,
	0x70, 0x62, 0x3b, 0x6d, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_mockoptions_proto_rawDescOnce sync.Once
	file_mockoptions_proto_rawDescData = file_mockoptions_proto_rawDesc
)

func file_mockoptions_proto_rawDescGZIP() []byte {
	file_mockoptions_proto_rawDescOnce.Do(func() {
		file_mockoptions_proto_rawDescData = protoimpl.X.CompressGZIP(file_mockoptions_proto_rawDescData)
	})
	return file_mockoptions_proto_rawDescData
}

var file_mockoptions_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mockoptions_proto_goTypes = []interface{}{
	(MockFieldType)(0),                // 0: mockpb.MockFieldType
	(*descriptorpb.FieldOptions)(nil), // 1: google.protobuf.FieldOptions
}
var file_mockoptions_proto_depIdxs = []int32{
	1, // 0: mockpb.type:extendee -> google.protobuf.FieldOptions
	0, // 1: mockpb.type:type_name -> mockpb.MockFieldType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	1, // [1:2] is the sub-list for extension type_name
	0, // [0:1] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mockoptions_proto_init() }
func file_mockoptions_proto_init() {
	if File_mockoptions_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mockoptions_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_mockoptions_proto_goTypes,
		DependencyIndexes: file_mockoptions_proto_depIdxs,
		EnumInfos:         file_mockoptions_proto_enumTypes,
		ExtensionInfos:    file_mockoptions_proto_extTypes,
	}.Build()
	File_mockoptions_proto = out.File
	file_mockoptions_proto_rawDesc = nil
	file_mockoptions_proto_goTypes = nil
	file_mockoptions_proto_depIdxs = nil
}
