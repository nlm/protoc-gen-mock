// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: mockoptions.proto

package mockpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StandardFieldType represents a standard type.
// These types are useful to provide context to protobuf generators
// and therefore, improve the generation.
type MockFieldType int32

const (
	MockFieldType_mock_field_type_unknown MockFieldType = 0 // technical
	MockFieldType_ip                      MockFieldType = 1
	MockFieldType_ipv4                    MockFieldType = 2
	MockFieldType_ipv6                    MockFieldType = 3
	MockFieldType_size                    MockFieldType = 4
	MockFieldType_uuid                    MockFieldType = 5
	MockFieldType_ipnet                   MockFieldType = 6
	MockFieldType_mac_address             MockFieldType = 7
	MockFieldType_url                     MockFieldType = 8
	MockFieldType_useragent               MockFieldType = 20
	MockFieldType_domain                  MockFieldType = 21
	MockFieldType_tld                     MockFieldType = 22
	MockFieldType_email                   MockFieldType = 23
	MockFieldType_file_extension          MockFieldType = 24
	MockFieldType_mime_type               MockFieldType = 25
	MockFieldType_http_method             MockFieldType = 26
	MockFieldType_http_statuscode         MockFieldType = 27
	MockFieldType_http_statuscode_simple  MockFieldType = 28
	MockFieldType_hexcolor                MockFieldType = 29
	// images
	MockFieldType_image     MockFieldType = 40
	MockFieldType_image_url MockFieldType = 41
	MockFieldType_log_level MockFieldType = 42
	// street_address will generate a random address street string
	MockFieldType_street_address MockFieldType = 50
	// streen_name will generate a random address street name string
	MockFieldType_street_name MockFieldType = 51
	// street_number will generate a random address street number string
	MockFieldType_street_number MockFieldType = 52
	// street_prefix will generate a random address street prefix string
	MockFieldType_street_prefix MockFieldType = 53
	// street_suffix will generate a random address street suffix string
	MockFieldType_street_suffix     MockFieldType = 54
	MockFieldType_city              MockFieldType = 55
	MockFieldType_country           MockFieldType = 56
	MockFieldType_country_short     MockFieldType = 57
	MockFieldType_creditcard_cvv    MockFieldType = 58
	MockFieldType_creditcard_number MockFieldType = 59
	MockFieldType_creditcard_type   MockFieldType = 60
	MockFieldType_currency          MockFieldType = 61
	MockFieldType_currency_short    MockFieldType = 62
	MockFieldType_phone_number      MockFieldType = 63
	MockFieldType_language          MockFieldType = 64
	MockFieldType_language_short    MockFieldType = 65
	MockFieldType_language_bcp      MockFieldType = 66
	MockFieldType_latitude          MockFieldType = 67
	MockFieldType_longitude         MockFieldType = 68
	MockFieldType_timezone          MockFieldType = 69
	MockFieldType_timezone_short    MockFieldType = 70
	MockFieldType_timezone_offset   MockFieldType = 71
	// TimeZoneRegion will select a random region style timezone string, e.g. "America/Chicago"
	MockFieldType_timezone_region MockFieldType = 72
	MockFieldType_first_name      MockFieldType = 73
	MockFieldType_last_name       MockFieldType = 74
	MockFieldType_full_name       MockFieldType = 75
	MockFieldType_name_prefix     MockFieldType = 76
	MockFieldType_us_ssn          MockFieldType = 77
	MockFieldType_us_state        MockFieldType = 78
	MockFieldType_us_state_short  MockFieldType = 79
	MockFieldType_date            MockFieldType = 80
	MockFieldType_year            MockFieldType = 81
	MockFieldType_day             MockFieldType = 82
	MockFieldType_hour            MockFieldType = 83
	MockFieldType_minute          MockFieldType = 84
	MockFieldType_second          MockFieldType = 85
	MockFieldType_month           MockFieldType = 86
	MockFieldType_month_string    MockFieldType = 87
	MockFieldType_nanosecond      MockFieldType = 88
	MockFieldType_date_future     MockFieldType = 89
	MockFieldType_date_past       MockFieldType = 90
	MockFieldType_date_now        MockFieldType = 91
	// native types
	MockFieldType_number MockFieldType = 100
	// misc
	MockFieldType_author      MockFieldType = 120
	MockFieldType_app_name    MockFieldType = 121
	MockFieldType_version     MockFieldType = 122
	MockFieldType_color       MockFieldType = 123
	MockFieldType_company     MockFieldType = 124
	MockFieldType_emoji       MockFieldType = 125
	MockFieldType_emoji_alias MockFieldType = 126
	MockFieldType_lorem_ipsum MockFieldType = 127
	MockFieldType_password    MockFieldType = 128
	MockFieldType_phrase      MockFieldType = 129
	MockFieldType_price       MockFieldType = 130
	MockFieldType_job_title   MockFieldType = 131
)

// Enum value maps for MockFieldType.
var (
	MockFieldType_name = map[int32]string{
		0:   "mock_field_type_unknown",
		1:   "ip",
		2:   "ipv4",
		3:   "ipv6",
		4:   "size",
		5:   "uuid",
		6:   "ipnet",
		7:   "mac_address",
		8:   "url",
		20:  "useragent",
		21:  "domain",
		22:  "tld",
		23:  "email",
		24:  "file_extension",
		25:  "mime_type",
		26:  "http_method",
		27:  "http_statuscode",
		28:  "http_statuscode_simple",
		29:  "hexcolor",
		40:  "image",
		41:  "image_url",
		42:  "log_level",
		50:  "street_address",
		51:  "street_name",
		52:  "street_number",
		53:  "street_prefix",
		54:  "street_suffix",
		55:  "city",
		56:  "country",
		57:  "country_short",
		58:  "creditcard_cvv",
		59:  "creditcard_number",
		60:  "creditcard_type",
		61:  "currency",
		62:  "currency_short",
		63:  "phone_number",
		64:  "language",
		65:  "language_short",
		66:  "language_bcp",
		67:  "latitude",
		68:  "longitude",
		69:  "timezone",
		70:  "timezone_short",
		71:  "timezone_offset",
		72:  "timezone_region",
		73:  "first_name",
		74:  "last_name",
		75:  "full_name",
		76:  "name_prefix",
		77:  "us_ssn",
		78:  "us_state",
		79:  "us_state_short",
		80:  "date",
		81:  "year",
		82:  "day",
		83:  "hour",
		84:  "minute",
		85:  "second",
		86:  "month",
		87:  "month_string",
		88:  "nanosecond",
		89:  "date_future",
		90:  "date_past",
		91:  "date_now",
		100: "number",
		120: "author",
		121: "app_name",
		122: "version",
		123: "color",
		124: "company",
		125: "emoji",
		126: "emoji_alias",
		127: "lorem_ipsum",
		128: "password",
		129: "phrase",
		130: "price",
		131: "job_title",
	}
	MockFieldType_value = map[string]int32{
		"mock_field_type_unknown": 0,
		"ip":                      1,
		"ipv4":                    2,
		"ipv6":                    3,
		"size":                    4,
		"uuid":                    5,
		"ipnet":                   6,
		"mac_address":             7,
		"url":                     8,
		"useragent":               20,
		"domain":                  21,
		"tld":                     22,
		"email":                   23,
		"file_extension":          24,
		"mime_type":               25,
		"http_method":             26,
		"http_statuscode":         27,
		"http_statuscode_simple":  28,
		"hexcolor":                29,
		"image":                   40,
		"image_url":               41,
		"log_level":               42,
		"street_address":          50,
		"street_name":             51,
		"street_number":           52,
		"street_prefix":           53,
		"street_suffix":           54,
		"city":                    55,
		"country":                 56,
		"country_short":           57,
		"creditcard_cvv":          58,
		"creditcard_number":       59,
		"creditcard_type":         60,
		"currency":                61,
		"currency_short":          62,
		"phone_number":            63,
		"language":                64,
		"language_short":          65,
		"language_bcp":            66,
		"latitude":                67,
		"longitude":               68,
		"timezone":                69,
		"timezone_short":          70,
		"timezone_offset":         71,
		"timezone_region":         72,
		"first_name":              73,
		"last_name":               74,
		"full_name":               75,
		"name_prefix":             76,
		"us_ssn":                  77,
		"us_state":                78,
		"us_state_short":          79,
		"date":                    80,
		"year":                    81,
		"day":                     82,
		"hour":                    83,
		"minute":                  84,
		"second":                  85,
		"month":                   86,
		"month_string":            87,
		"nanosecond":              88,
		"date_future":             89,
		"date_past":               90,
		"date_now":                91,
		"number":                  100,
		"author":                  120,
		"app_name":                121,
		"version":                 122,
		"color":                   123,
		"company":                 124,
		"emoji":                   125,
		"emoji_alias":             126,
		"lorem_ipsum":             127,
		"password":                128,
		"phrase":                  129,
		"price":                   130,
		"job_title":               131,
	}
)

func (x MockFieldType) Enum() *MockFieldType {
	p := new(MockFieldType)
	*p = x
	return p
}

func (x MockFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MockFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_mockoptions_proto_enumTypes[0].Descriptor()
}

func (MockFieldType) Type() protoreflect.EnumType {
	return &file_mockoptions_proto_enumTypes[0]
}

func (x MockFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MockFieldType.Descriptor instead.
func (MockFieldType) EnumDescriptor() ([]byte, []int) {
	return file_mockoptions_proto_rawDescGZIP(), []int{0}
}

type ConstFieldType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ConstFieldType_String_
	//	*ConstFieldType_Int
	//	*ConstFieldType_Uint32
	Value isConstFieldType_Value `protobuf_oneof:"value"`
}

func (x *ConstFieldType) Reset() {
	*x = ConstFieldType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockoptions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstFieldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstFieldType) ProtoMessage() {}

func (x *ConstFieldType) ProtoReflect() protoreflect.Message {
	mi := &file_mockoptions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstFieldType.ProtoReflect.Descriptor instead.
func (*ConstFieldType) Descriptor() ([]byte, []int) {
	return file_mockoptions_proto_rawDescGZIP(), []int{0}
}

func (m *ConstFieldType) GetValue() isConstFieldType_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ConstFieldType) GetString_() string {
	if x, ok := x.GetValue().(*ConstFieldType_String_); ok {
		return x.String_
	}
	return ""
}

func (x *ConstFieldType) GetInt() int32 {
	if x, ok := x.GetValue().(*ConstFieldType_Int); ok {
		return x.Int
	}
	return 0
}

func (x *ConstFieldType) GetUint32() uint32 {
	if x, ok := x.GetValue().(*ConstFieldType_Uint32); ok {
		return x.Uint32
	}
	return 0
}

type isConstFieldType_Value interface {
	isConstFieldType_Value()
}

type ConstFieldType_String_ struct {
	String_ string `protobuf:"bytes,1,opt,name=string,proto3,oneof"`
}

type ConstFieldType_Int struct {
	Int int32 `protobuf:"varint,2,opt,name=int,proto3,oneof"`
}

type ConstFieldType_Uint32 struct {
	Uint32 uint32 `protobuf:"varint,3,opt,name=uint32,proto3,oneof"`
}

func (*ConstFieldType_String_) isConstFieldType_Value() {}

func (*ConstFieldType_Int) isConstFieldType_Value() {}

func (*ConstFieldType_Uint32) isConstFieldType_Value() {}

type MapFieldType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Randomkey   MockFieldType   `protobuf:"varint,1,opt,name=randomkey,proto3,enum=mockpb.MockFieldType" json:"randomkey,omitempty"`
	Randomvalue MockFieldType   `protobuf:"varint,2,opt,name=randomvalue,proto3,enum=mockpb.MockFieldType" json:"randomvalue,omitempty"`
	Constkey    *ConstFieldType `protobuf:"bytes,3,opt,name=constkey,proto3" json:"constkey,omitempty"`
	Constvalue  *ConstFieldType `protobuf:"bytes,4,opt,name=constvalue,proto3" json:"constvalue,omitempty"`
}

func (x *MapFieldType) Reset() {
	*x = MapFieldType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mockoptions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapFieldType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapFieldType) ProtoMessage() {}

func (x *MapFieldType) ProtoReflect() protoreflect.Message {
	mi := &file_mockoptions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapFieldType.ProtoReflect.Descriptor instead.
func (*MapFieldType) Descriptor() ([]byte, []int) {
	return file_mockoptions_proto_rawDescGZIP(), []int{1}
}

func (x *MapFieldType) GetRandomkey() MockFieldType {
	if x != nil {
		return x.Randomkey
	}
	return MockFieldType_mock_field_type_unknown
}

func (x *MapFieldType) GetRandomvalue() MockFieldType {
	if x != nil {
		return x.Randomvalue
	}
	return MockFieldType_mock_field_type_unknown
}

func (x *MapFieldType) GetConstkey() *ConstFieldType {
	if x != nil {
		return x.Constkey
	}
	return nil
}

func (x *MapFieldType) GetConstvalue() *ConstFieldType {
	if x != nil {
		return x.Constvalue
	}
	return nil
}

var file_mockoptions_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*MockFieldType)(nil),
		Field:         90210,
		Name:          "mockpb.random",
		Tag:           "varint,90210,opt,name=random,enum=mockpb.MockFieldType",
		Filename:      "mockoptions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*ConstFieldType)(nil),
		Field:         90211,
		Name:          "mockpb.const",
		Tag:           "bytes,90211,opt,name=const",
		Filename:      "mockoptions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*MapFieldType)(nil),
		Field:         90212,
		Name:          "mockpb.map",
		Tag:           "bytes,90212,opt,name=map",
		Filename:      "mockoptions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*uint32)(nil),
		Field:         90213,
		Name:          "mockpb.repeat",
		Tag:           "varint,90213,opt,name=repeat",
		Filename:      "mockoptions.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// Type specify the standard type of a field.
	// On a map field, this annotation will target only the value type.
	//
	// optional mockpb.MockFieldType random = 90210;
	E_Random = &file_mockoptions_proto_extTypes[0]
	// optional mockpb.ConstFieldType const = 90211;
	E_Const = &file_mockoptions_proto_extTypes[1]
	// optional mockpb.MapFieldType map = 90212;
	E_Map = &file_mockoptions_proto_extTypes[2]
	// MockFieldType mapkeytype    = 90211;
	// MockFieldType mapvaluetype  = 90212;
	// string        template      = 90211;
	//
	// optional uint32 repeat = 90213;
	E_Repeat = &file_mockoptions_proto_extTypes[3]
)

var File_mockoptions_proto protoreflect.FileDescriptor

var file_mockoptions_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x6f, 0x63, 0x6b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xe8, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x33, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x2e, 0x4d, 0x6f,
	0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x9c, 0x09, 0x0a, 0x0d,
	0x4d, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x6d, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x69, 0x70,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x69, 0x70, 0x76, 0x36, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x70,
	0x6e, 0x65, 0x74, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x10, 0x08, 0x12,
	0x0d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x14, 0x12, 0x0a,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x6c,
	0x64, 0x10, 0x16, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x17, 0x12, 0x12,
	0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x10, 0x18, 0x12, 0x0d, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10,
	0x19, 0x12, 0x0f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x68, 0x65, 0x78, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x10,
	0x1d, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x28, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x10, 0x29, 0x12, 0x0d, 0x0a, 0x09, 0x6c,
	0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10, 0x32, 0x12, 0x0f,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x33, 0x12,
	0x11, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x10, 0x34, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x10, 0x35, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x5f,
	0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x10, 0x36, 0x12, 0x08, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x10, 0x37, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x10, 0x38, 0x12,
	0x11, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x10, 0x39, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x76, 0x76, 0x10, 0x3a, 0x12, 0x15, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x3b, 0x12, 0x13, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x10, 0x3c, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x3d,
	0x12, 0x12, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x10, 0x3e, 0x12, 0x10, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x10, 0x3f, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x10, 0x40, 0x12, 0x12, 0x0a, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x10, 0x41, 0x12, 0x10, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x63, 0x70, 0x10, 0x42, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x10, 0x43, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x10, 0x44, 0x12, 0x0c, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x10, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x10, 0x46, 0x12, 0x13, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x10, 0x47, 0x12, 0x13,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x10, 0x48, 0x12, 0x0e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x10, 0x49, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x10, 0x4a, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10,
	0x4b, 0x12, 0x0f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x10, 0x4c, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x73, 0x5f, 0x73, 0x73, 0x6e, 0x10, 0x4d, 0x12, 0x0c,
	0x0a, 0x08, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x4e, 0x12, 0x12, 0x0a, 0x0e,
	0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x10, 0x4f,
	0x12, 0x08, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x10, 0x50, 0x12, 0x08, 0x0a, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x10, 0x51, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x10, 0x52, 0x12, 0x08, 0x0a,
	0x04, 0x68, 0x6f, 0x75, 0x72, 0x10, 0x53, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x10, 0x54, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x55, 0x12,
	0x09, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x56, 0x12, 0x10, 0x0a, 0x0c, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x57, 0x12, 0x0e, 0x0a, 0x0a,
	0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x58, 0x12, 0x0f, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0x59, 0x12, 0x0d, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x10, 0x5a, 0x12, 0x0c, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x77, 0x10, 0x5b, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x10, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x10, 0x78, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x79,
	0x12, 0x0b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x7a, 0x12, 0x09, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x10, 0x7b, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x10, 0x7c, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x10, 0x7d,
	0x12, 0x0f, 0x0a, 0x0b, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x10,
	0x7e, 0x12, 0x0f, 0x0a, 0x0b, 0x6c, 0x6f, 0x72, 0x65, 0x6d, 0x5f, 0x69, 0x70, 0x73, 0x75, 0x6d,
	0x10, 0x7f, 0x12, 0x0d, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x80,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x10, 0x81, 0x01, 0x12, 0x0a,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x10, 0x82, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x6a, 0x6f,
	0x62, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x10, 0x83, 0x01, 0x3a, 0x4e, 0x0a, 0x06, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xe2, 0xc0, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x6f,
	0x63, 0x6b, 0x70, 0x62, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x3a, 0x4d, 0x0a, 0x05, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xe3, 0xc0, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x63,
	0x6b, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x3a, 0x47, 0x0a, 0x03, 0x6d, 0x61, 0x70,
	0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xe4, 0xc0, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x63, 0x6b, 0x70, 0x62,
	0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6d,
	0x61, 0x70, 0x3a, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe5, 0xc0, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x42, 0x35, 0x5a, 0x33, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6c, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6d, 0x6f, 0x63, 0x6b, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x6f, 0x63, 0x6b, 0x70, 0x62, 0x3b, 0x6d, 0x6f, 0x63, 0x6b,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mockoptions_proto_rawDescOnce sync.Once
	file_mockoptions_proto_rawDescData = file_mockoptions_proto_rawDesc
)

func file_mockoptions_proto_rawDescGZIP() []byte {
	file_mockoptions_proto_rawDescOnce.Do(func() {
		file_mockoptions_proto_rawDescData = protoimpl.X.CompressGZIP(file_mockoptions_proto_rawDescData)
	})
	return file_mockoptions_proto_rawDescData
}

var file_mockoptions_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mockoptions_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_mockoptions_proto_goTypes = []interface{}{
	(MockFieldType)(0),                // 0: mockpb.MockFieldType
	(*ConstFieldType)(nil),            // 1: mockpb.ConstFieldType
	(*MapFieldType)(nil),              // 2: mockpb.MapFieldType
	(*descriptorpb.FieldOptions)(nil), // 3: google.protobuf.FieldOptions
}
var file_mockoptions_proto_depIdxs = []int32{
	0,  // 0: mockpb.MapFieldType.randomkey:type_name -> mockpb.MockFieldType
	0,  // 1: mockpb.MapFieldType.randomvalue:type_name -> mockpb.MockFieldType
	1,  // 2: mockpb.MapFieldType.constkey:type_name -> mockpb.ConstFieldType
	1,  // 3: mockpb.MapFieldType.constvalue:type_name -> mockpb.ConstFieldType
	3,  // 4: mockpb.random:extendee -> google.protobuf.FieldOptions
	3,  // 5: mockpb.const:extendee -> google.protobuf.FieldOptions
	3,  // 6: mockpb.map:extendee -> google.protobuf.FieldOptions
	3,  // 7: mockpb.repeat:extendee -> google.protobuf.FieldOptions
	0,  // 8: mockpb.random:type_name -> mockpb.MockFieldType
	1,  // 9: mockpb.const:type_name -> mockpb.ConstFieldType
	2,  // 10: mockpb.map:type_name -> mockpb.MapFieldType
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	8,  // [8:11] is the sub-list for extension type_name
	4,  // [4:8] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_mockoptions_proto_init() }
func file_mockoptions_proto_init() {
	if File_mockoptions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mockoptions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstFieldType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mockoptions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapFieldType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mockoptions_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ConstFieldType_String_)(nil),
		(*ConstFieldType_Int)(nil),
		(*ConstFieldType_Uint32)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mockoptions_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 4,
			NumServices:   0,
		},
		GoTypes:           file_mockoptions_proto_goTypes,
		DependencyIndexes: file_mockoptions_proto_depIdxs,
		EnumInfos:         file_mockoptions_proto_enumTypes,
		MessageInfos:      file_mockoptions_proto_msgTypes,
		ExtensionInfos:    file_mockoptions_proto_extTypes,
	}.Build()
	File_mockoptions_proto = out.File
	file_mockoptions_proto_rawDesc = nil
	file_mockoptions_proto_goTypes = nil
	file_mockoptions_proto_depIdxs = nil
}
